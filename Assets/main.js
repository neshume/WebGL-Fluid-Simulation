// Generated by Haxe 4.0.0-rc.2+77068e1
(function () { "use strict";
var Main = function() {
	var flow1 = new flow_Flow("LDR_RGB1_0.png");
	console.log("Main.hx:16:","test");
	window.document.body.onpointerdown = $bind(this,this.onpointerdown);
	window.document.body.onpointermove = $bind(this,this.onpointermove);
};
Main.main = function() {
	new Main();
};
Main.prototype = {
	onpointerdown: function(e) {
	}
	,onpointermove: function(e) {
	}
};
var flow_Flow = function(ditheringImage) {
	console.log("flow/Flow.hx:54:",new flow_shaders_BloomBlurShader());
	flow_Flow.bloomFramebuffers = [];
	this.pointers = [];
	this.splatStack = [];
	this.canvas = window.document.createElement("canvas");
	this.canvas.id = "flow";
	window.document.body.appendChild(this.canvas);
	this.canvas.width = this.canvas.clientWidth;
	this.canvas.height = this.canvas.clientHeight;
	flow_Flow.config = { SIM_RESOLUTION : 128, DYE_RESOLUTION : 512, DENSITY_DISSIPATION : 0.97, VELOCITY_DISSIPATION : 0.98, PRESSURE_DISSIPATION : 0.8, PRESSURE_ITERATIONS : 20, CURL : 30, SPLAT_RADIUS : 0.5, SHADING : true, COLORFUL : true, PAUSED : false, BACK_COLOR : { r : 0, g : 0, b : 0}, TRANSPARENT : false, BLOOM : true, BLOOM_ITERATIONS : 8, BLOOM_RESOLUTION : 256, BLOOM_INTENSITY : 0.8, BLOOM_THRESHOLD : 0.6, BLOOM_SOFT_KNEE : 0.7};
	var context = this.getWebGLContext(this.canvas);
	flow_Flow.gl = context.gl;
	flow_Flow.ext = context.ext;
	if(this.isMobile()) {
		flow_Flow.config.SHADING = false;
	}
	if(!flow_Flow.ext.supportLinearFiltering) {
		flow_Flow.config.SHADING = false;
		flow_Flow.config.BLOOM = false;
	}
	this.pointers.push({ id : 0, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 1, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 2, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 3, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 4, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 5, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 6, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 7, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 8, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.pointers.push({ id : 9, x : 0, y : 0, dx : 0, dy : 0, down : false, moved : false, color : null});
	this.lastColorChangeTime = new Date().getTime();
	this.ditheringTexture = this.createTextureAsync(ditheringImage);
};
flow_Flow.prototype = {
	createTextureAsync: function(url) {
		var texture = flow_Flow.gl.createTexture();
		flow_Flow.gl.bindTexture(3553,texture);
		flow_Flow.gl.texParameteri(3553,10241,9729);
		flow_Flow.gl.texParameteri(3553,10240,9729);
		flow_Flow.gl.texParameteri(3553,10242,10497);
		flow_Flow.gl.texParameteri(3553,10243,10497);
		flow_Flow.gl.texImage2D(3553,0,6407,1,1,0,6407,5121,new Uint8Array([255,255,255]));
		var obj = { texture : texture, width : 1, height : 1, attach : function(id) {
			flow_Flow.gl.activeTexture(33984 + id);
			flow_Flow.gl.bindTexture(3553,texture);
			return id;
		}};
		var image = new Image();
		image.onload = function() {
			obj.width = image.width;
			obj.height = image.height;
			flow_Flow.gl.bindTexture(3553,texture);
			flow_Flow.gl.texImage2D(3553,0,6407,6407,5121,image);
			return;
		};
		image.src = url;
		return obj;
	}
	,getWebGLContext: function(canvas) {
		var params = { alpha : true, depth : false, stencil : false, antialias : false, preserveDrawingBuffer : false};
		flow_Flow.gl = canvas.getContext("webgl2",params);
		var isWebGL2 = flow_Flow.gl != null;
		if(!isWebGL2) {
			flow_Flow.gl = canvas.getContext("webgl",params);
		}
		if(flow_Flow.gl == null) {
			flow_Flow.gl = canvas.getContext("experimental-webgl",params);
		}
		var halfFloat;
		var supportLinearFiltering;
		if(isWebGL2) {
			flow_Flow.gl.getExtension("EXT_color_buffer_float");
			supportLinearFiltering = flow_Flow.gl.getExtension("OES_texture_float_linear");
		} else {
			halfFloat = flow_Flow.gl.getExtension("OES_texture_half_float");
			supportLinearFiltering = flow_Flow.gl.getExtension("OES_texture_half_float_linear");
		}
		flow_Flow.gl.clearColor(0.0,0.0,0.0,1.0);
		var halfFloatTexType = 5131;
		var formatRGBA;
		var formatRG;
		var formatR;
		if(isWebGL2) {
			formatRGBA = this.getSupportedFormat(flow_Flow.gl,34842,6408,halfFloatTexType);
			formatRG = this.getSupportedFormat(flow_Flow.gl,33327,33319,halfFloatTexType);
			formatR = this.getSupportedFormat(flow_Flow.gl,33325,6403,halfFloatTexType);
		} else {
			formatRGBA = this.getSupportedFormat(flow_Flow.gl,6408,6408,halfFloatTexType);
			formatRG = this.getSupportedFormat(flow_Flow.gl,6408,6408,halfFloatTexType);
			formatR = this.getSupportedFormat(flow_Flow.gl,6408,6408,halfFloatTexType);
		}
		return { gl : flow_Flow.gl, ext : { formatRGBA : formatRGBA, formatRG : formatRG, formatR : formatR, halfFloatTexType : halfFloatTexType, supportLinearFiltering : supportLinearFiltering}};
	}
	,getSupportedFormat: function(gl,internalFormat,format,type) {
		if(!this.supportRenderTextureFormat(gl,internalFormat,format,type)) {
			switch(internalFormat) {
			case 33325:
				return this.getSupportedFormat(gl,33327,33319,type);
			case 33327:
				return this.getSupportedFormat(gl,34842,6408,type);
			default:
				return null;
			}
		}
		return { internalFormat : internalFormat, format : format};
	}
	,supportRenderTextureFormat: function(gl,internalFormat,format,type) {
		var texture = gl.createTexture();
		gl.bindTexture(3553,texture);
		gl.texParameteri(3553,10241,9728);
		gl.texParameteri(3553,10240,9728);
		gl.texParameteri(3553,10242,33071);
		gl.texParameteri(3553,10243,33071);
		gl.texImage2D(3553,0,internalFormat,4,4,0,format,type,null);
		var fbo = gl.createFramebuffer();
		gl.bindFramebuffer(36160,fbo);
		gl.framebufferTexture2D(36160,36064,3553,texture,0);
		var status = gl.checkFramebufferStatus(36160);
		if(status != 36053) {
			return false;
		}
		return true;
	}
	,isMobile: function() {
		return false;
	}
	,resizeFBO: function(target,w,h,internalFormat,format,type,param) {
		return null;
	}
	,createFBO: function(w,h,internalFormat,format,type,param) {
		flow_Flow.gl.activeTexture(33984);
		var texture = flow_Flow.gl.createTexture();
		flow_Flow.gl.bindTexture(3553,texture);
		flow_Flow.gl.texParameteri(3553,10241,param);
		flow_Flow.gl.texParameteri(3553,10240,param);
		flow_Flow.gl.texParameteri(3553,10242,33071);
		flow_Flow.gl.texParameteri(3553,10243,33071);
		flow_Flow.gl.texImage2D(3553,0,internalFormat,w,h,0,format,type,null);
		var fbo = flow_Flow.gl.createFramebuffer();
		flow_Flow.gl.bindFramebuffer(36160,fbo);
		flow_Flow.gl.framebufferTexture2D(36160,36064,3553,texture,0);
		flow_Flow.gl.viewport(0,0,w,h);
		flow_Flow.gl.clear(16384);
		return { texture : texture, fbo : fbo, width : w, height : h, attach : function(id) {
			flow_Flow.gl.activeTexture(33984 + id);
			flow_Flow.gl.bindTexture(3553,texture);
			return id;
		}};
	}
	,getResolution: function(resolution) {
		var aspectRatio = flow_Flow.gl.drawingBufferWidth / flow_Flow.gl.drawingBufferHeight;
		if(aspectRatio < 1) {
			aspectRatio = 1.0 / aspectRatio;
		}
		var max = Math.round(resolution * aspectRatio);
		var min = Math.round(resolution);
		if(flow_Flow.gl.drawingBufferWidth > flow_Flow.gl.drawingBufferHeight) {
			return { width : max, height : min};
		} else {
			return { width : min, height : max};
		}
	}
};
var flow_FlowUtils = function(canvas,gl) {
	this.canvas = canvas;
	this.gl = gl;
	gl.bindBuffer(34962,gl.createBuffer());
	gl.bufferData(34962,new Float32Array([-1,-1,-1,1,1,1,1,-1]),35044);
	gl.bindBuffer(34963,gl.createBuffer());
	gl.bufferData(34963,new Uint16Array([0,1,2,0,2,3]),35044);
	gl.vertexAttribPointer(0,2,5126,false,0,0);
	gl.enableVertexAttribArray(0);
};
flow_FlowUtils.prototype = {
	blit: function(destination) {
		this.gl.bindFramebuffer(36160,destination);
		this.gl.drawElements(4,6,5123,0);
	}
	,multipleSplats: function(amount) {
		var _g = 0;
		var _g1 = amount;
		while(_g < _g1) {
			var i = _g++;
			var color = this.generateColor();
		}
	}
	,generateColor: function() {
		var c = this.HSVtoRGB(Math.random(),1.0,1.0);
		c.r *= 0.15;
		c.g *= 0.15;
		c.b *= 0.15;
		return c;
	}
	,HSVtoRGB: function(h,s,v) {
		var r = 0;
		var g = 0;
		var b = 0;
		var i = 0;
		var f = 0;
		var p = 0;
		var q = 0;
		var t = 0;
		i = Math.floor(h * 6);
		f = h * 6 - i;
		p = v * (1 - s);
		q = v * (1 - f * s);
		t = v * (1 - (1 - f) * s);
		var m = i % 6;
		switch(m) {
		case 0:
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
			g = p;
			b = v;
			break;
		case 5:
			r = v;
			g = p;
			b = q;
			break;
		}
		return { r : r, g : g, b : b};
	}
};
var flow_shaders_BloomBlurShader = require("shaders/bloomBlurShader.glsl");
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
Main.main();
})();

//# sourceMappingURL=main.js.map